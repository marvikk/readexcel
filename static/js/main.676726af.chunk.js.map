{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","items","setItems","className","type","onChange","e","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_json","onerror","error","then","d","filteredArray","filter","item","Megnevezés","allDatesObj","separatorObj","person","Nap","newFuckinObjectOfPeople","Név","clone","JSON","parse","stringify","uberFuckingResult","name","topRow","bottomRow","topRowCounter","bottomRowCounter","personByName","date","push","Ossz","console","log","readExcel","files","length","style","marginTop","Object","keys","map","key","index","scope","i","onClick","book_new","ws_data","json_to_sheet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,mLC0J5BC,EArJH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAuGhB,OACE,yBAAKC,UAAU,QACb,2BACEC,KAAK,OACLD,UAAU,eACVE,SAAU,SAACC,IAzGC,SAACC,GACD,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,kBAAkBN,GAE7BI,EAAWG,OAAS,SAACR,GACnB,IAAMS,EAAcT,EAAEU,OAAOC,OACvBC,EAAKC,OAAUJ,EAAa,CAAEX,KAAM,WACpCgB,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,GACfI,EAAOL,QAAWM,cAAcH,GACtCb,EAAQe,IAGVb,EAAWe,QAAU,SAACC,GACpBjB,EAAOiB,OAIHC,MAAK,SAACC,GACZ,IADkB,EACdC,EAAgBD,EAAEE,QAAO,SAAAC,GAC3B,MAA2B,qBAAnBA,EAAKC,iBAAqD,8BAAnBD,EAAKC,mBAGlDC,EAAc,GACdC,EAAe,GAND,cAOCL,GAPD,IAOlB,2BAAkC,CAAC,IAA1BM,EAAyB,QAC3BF,EAAYE,EAAOC,OACtBH,EAAYE,EAAOC,KAAO,CACxB,6BAAqB,IACrB,oBAAgB,IAGfF,EAAaC,EAAOC,OACvBF,EAAaC,EAAOC,KAAO,KAfb,8BAoBlB,IApBkB,EAoBdC,EAA0B,GApBZ,cAqBCR,GArBD,IAqBlB,2BAAkC,CAAC,IAA1BM,EAAyB,QAChC,IAAKE,EAAwBF,EAAOG,UAAM,CAGxC,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,UAAUT,IACtCI,EAAwBF,EAAOG,UAAOC,EAExCF,EAAwBF,EAAOG,UAAKH,EAAOC,KAAKD,EAAOH,iBAAcG,EAAO,eA5B5D,8BA+BlB,IAAIQ,EAAoB,GAExB,IAAK,IAAIC,KAAQP,EAAyB,CACxC,IAAIQ,EAAS,GACTC,EAAY,GACZC,EAAgB,EAChBC,EAAmB,EACnBC,EAAeZ,EAAwBO,GAC3C,IAAK,IAAIM,KAAQD,EAEfJ,EAAOK,GAAQD,EAAaC,GAC5BJ,EAAUI,GAAQD,EAAaC,GAE3BD,EAAaC,GAAM,+BAAwB,IAE7CL,EAAOK,GAAQD,EAAaC,GAAM,qBAClCH,GAAiBE,EAAaC,GAAM,qBACpCJ,EAAUI,GAAQ,KAEhBD,EAAaC,GAAM,8BAAuB,IAE5CJ,EAAUI,GAAQD,EAAaC,GAAM,qBACrCF,GAAoBC,EAAaC,GAAM,qBACvCL,EAAOK,GAAQ,KAE8B,KAA3CD,EAAaC,GAAM,gCACrBL,EAAOK,GAAQ,IACfJ,EAAUI,GAAQ,KAGtBP,EAAkBQ,KAAlB,aAAyB,IAAO,GAAI,OAAU,GAAIC,KAAM,IAAOlB,IAC/DS,EAAkBQ,KAAlB,aAAyB,IAAOP,EAAM,OAAU,cAAeQ,KAAML,GAAkBF,IACvFF,EAAkBQ,KAAlB,aAAyB,IAAOP,EAAM,OAAU,iBAAkBQ,KAAMJ,GAAqBF,IAI/F7C,EAAS0C,GACTU,QAAQC,IAAIzB,MAoBR0B,CADalD,EAAEU,OAAOyC,MAAM,OAK9BxD,EAAMyD,OAAS,GAAK,yBAAKC,MAAO,CAAEC,UAAW,SAAU,2BAAOzD,UAAU,SAEtE,+BACE,4BAEI0D,OAAOC,KAAK7D,EAAM,IAAI8D,KAAI,SAAUC,EAAKC,GACvC,OAAO,wBAAIC,MAAM,MAAMF,IAAKA,EAAK7D,UAAU,QAAQ6D,QAK3D,+BACG/D,EAAM8D,KAAI,SAAC/B,EAAMmC,GAAP,OACT,wBAAIH,IAAKG,GACNN,OAAOC,KAAK9B,GAAM+B,KACjB,SAAAC,GAEE,MAAwB,iBAAbhC,EAAKgC,GACP,wBAAIE,MAAM,MAAM/D,UAAU,QAAQ6B,EAAKgC,IAGvC,wBAAIE,MAAM,MAAM/D,UAAU,QAA1B,oBAUtBF,EAAMyD,OAAS,GAAK,4BAAQvD,UAAU,kBAAkBiE,QAnDxC,WACnB,IAAIlD,EAAKC,QAAWkD,WACpBnD,EAAGG,WAAW+B,KAAK,cACnB,IAAIkB,EAAUrE,EACVqB,EAAKH,QAAWoD,cAAcD,GAClCpD,EAAGK,OAAO,cAAgBD,EAC1BH,YAAeD,EAAI,eA6CI,6BC1IPsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAA3D,GACL2B,QAAQ3B,MAAMA,EAAM4D,c","file":"static/js/main.676726af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport * as XLSX from \"xlsx\";\n\nconst App = () => {\n  const [items, setItems] = useState([]);\n\n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n        const wsname = wb.SheetNames[1];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n\n    promise.then((d) => {\n      let filteredArray = d.filter(item => {\n        return (item.Megnevezés == 'Lefedett idő') || (item.Megnevezés == 'Beosztás _érkezés')\n      })\n\n      let allDatesObj = {};\n      let separatorObj = {};\n      for (let person of filteredArray) {\n        if (!allDatesObj[person.Nap]) {\n          allDatesObj[person.Nap] = {\n            'Beosztás _érkezés': '-',\n            'Lefedett idő': 0\n          }\n        }\n        if (!separatorObj[person.Nap]) {\n          separatorObj[person.Nap] = ''\n        }\n      }\n      //console.log(allDatesObj);\n\n      var newFuckinObjectOfPeople = {};\n      for (let person of filteredArray) {\n        if (!newFuckinObjectOfPeople[person.Név]) {\n          //newFuckinObjectOfPeople[person.Név] = {};\n          //let copyOfAllDatesObj = new Object.assign({}, allDatesObj);\n          let clone = JSON.parse(JSON.stringify(allDatesObj));\n          newFuckinObjectOfPeople[person.Név] = clone;\n        }\n        newFuckinObjectOfPeople[person.Név][person.Nap][person.Megnevezés] = person['Órák']\n      }\n\n      let uberFuckingResult = [];\n\n      for (let name in newFuckinObjectOfPeople) {\n        let topRow = {};\n        let bottomRow = {};\n        let topRowCounter = 0;\n        let bottomRowCounter = 0;\n        let personByName = newFuckinObjectOfPeople[name];\n        for (let date in personByName) {\n          //console.log(personByName[date])\n          topRow[date] = personByName[date];\n          bottomRow[date] = personByName[date];\n          //console.log(personByName[date]['Beosztás _érkezés'] == 6)\n          if (personByName[date]['Beosztás _érkezés'] <= 6) {\n            //console.log(name + ' was working in first shift for ' + personByName[date]['Lefedett idő'] + ' hours on ' + date)\n            topRow[date] = personByName[date]['Lefedett idő'];\n            topRowCounter += personByName[date]['Lefedett idő'];\n            bottomRow[date] = '-'\n          }\n          if (personByName[date]['Beosztás _érkezés'] > 6) {\n            //console.log(name + ' was working in second shift for ' + personByName[date]['Lefedett idő'] + ' hours on ' + date)\n            bottomRow[date] = personByName[date]['Lefedett idő'];\n            bottomRowCounter += personByName[date]['Lefedett idő'];\n            topRow[date] = '-'\n          }\n          if (personByName[date]['Beosztás _érkezés'] == '-') {\n            topRow[date] = '-';\n            bottomRow[date] = '-'\n          }\n        }\n        uberFuckingResult.push({ 'Nev': '', 'Muszak': '', Ossz: '', ...separatorObj })\n        uberFuckingResult.push({ 'Nev': name, 'Muszak': 'Elso Muszak', Ossz: topRowCounter, ...topRow });\n        uberFuckingResult.push({ 'Nev': name, 'Muszak': 'Masodik Muszak', Ossz: bottomRowCounter, ...bottomRow });\n        //uberFuckingResult.push({ 'Nev': '', 'Muszak': '', ...separatorObj })\n      }\n\n      setItems(uberFuckingResult);\n      console.log(filteredArray);\n    });\n  };\n\n  const downloadFile = () => {\n    var wb = XLSX.utils.book_new();\n    wb.SheetNames.push(\"Test Sheet\");\n    var ws_data = items;\n    var ws = XLSX.utils.json_to_sheet(ws_data);\n    wb.Sheets[\"Test Sheet\"] = ws;\n    XLSX.writeFile(wb, 'test.xlsx')\n  }\n\n  return (\n    <div className='main'>\n      <input\n        type=\"file\"\n        className=\"form-control\"\n        onChange={(e) => {\n          const file = e.target.files[0];\n          readExcel(file);\n        }}\n      />\n      {\n        items.length > 0 && <div style={{ marginTop: '10px' }}><table className=\"table\"\n        >\n          <thead>\n            <tr>\n              {\n                Object.keys(items[0]).map(function (key, index) {\n                  return <th scope=\"col\" key={key} className='cell'>{key}</th>\n                })\n              }\n            </tr>\n          </thead>\n          <tbody>\n            {items.map((item, i) => (\n              <tr key={i}>\n                {Object.keys(item).map(\n                  key => {\n                    //console.log(item);\n                    if (typeof item[key] != 'object') {\n                      return <th scope='col' className='cell'>{item[key]}</th>\n                    }\n                    else {\n                      return <th scope='col' className='cell'>object</th>\n                    }\n                  }\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        </div>\n      }\n      {items.length > 0 && <button className='btn btn-primary' onClick={downloadFile}>Download Converted File</button>}</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}